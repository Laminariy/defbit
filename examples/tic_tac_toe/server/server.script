local defbit = require "defbit.defbit"
local session = require "examples.tic_tac_toe.modules.session"


local PORT = 8888

local function new_user(connection)
	local user = {
		connection = connection
		--type = type or 'spectator'
	}

	return user
end

local function add_user(self, user)
	table.insert(self.users, user)
end

local function remove_user(self, client)
	for i, us in ipairs(self.users) do
		if us.connection == client then
			table.remove(self.users, i)
			break
		end
	end
end


local function create_session(self)

end


function init(self)
	self.users = {}
	self.sessions = {}

	local function on_connect(client)
		local user = new_user(client)
		add_user(self, user)

		--client.shared:add(tbl, options)
	end

	local function on_disconnect(client)
		remove_user(self, client)
		client:disconnect()
	end

	self.server = defbit.server(PORT, on_connect, on_disconnect)
	local ok, err = self.server:start()
	if ok then
		print("server started")
	else
		print(err)
	end
end

function final(self)
	self.server:stop()
	for _, client in ipairs(self.clients) do
		client:disconnect()
	end
	self.clients = {}
end

function update(self, dt)
	self.server:update()
	for _, client in ipairs(self.clients) do
		client:update()
	end
end

function on_message(self, message_id, message, sender)
	-- Add message-handling code here
	-- Learn more: https://defold.com/manuals/message-passing/
	-- Remove this function if not needed
end

function on_input(self, action_id, action)
	-- Add input-handling code here. The game object this script is attached to
	-- must have acquired input focus:
	--
	--    msg.post(".", "acquire_input_focus")
	--
	-- All mapped input bindings will be received. Mouse and touch input will
	-- be received regardless of where on the screen it happened.
	-- Learn more: https://defold.com/manuals/input/
	-- Remove this function if not needed
end

function on_reload(self)
	-- Add reload-handling code here
	-- Learn more: https://defold.com/manuals/hot-reload/
	-- Remove this function if not needed
end
