local defbit = require "defbit.defbit"


function init(self)
	self.clients = {}
	
	local function on_disconnect(client)
		print("client disconnected from server")

		for i, cl in ipairs(self.clients) do
			if cl == client then
				table.remove(self.clients, i)
				break
			end
		end
	end

	local function on_connect(client)
		print("client connected")
		table.insert(self.clients, client)
		client.event:fire("hello_event", "hello_data")
		client.rpc:set_enviroment({ping = function()
			print("get ping")
			return "pong"
		end})
		client.shared:set_add_listener(function(shared_table)
			print('client added new shared table')
		end)
		client.shared:set_remove_listener(function(shared_table)
			print('client removed shared table')
		end)
		local shared_table = {
			position = {x=1, y=9},
			health = 9,
			state = 'idle',
			server_id = 0
		}
		local options = {
			on_update = function(shared_table, fields)
				print('client updated some fields:')
				for _, field in ipairs(fields) do
					print(field..': '..shared_table[field])
				end
			end,
			del_access = 'both',
			rights = {
				position = 'client',
				health = 'server',
				state = 'both'
			}
		}
		shared_table = client.shared.create(shared_table)
		client.shared:add(shared_table, options)
		shared_table.position = 1
		shared_table.health = 100
		shared_table.state = 'run'
		shared_table.server_id = 8
	end

	self.server = defbit.server(8888, on_connect, on_disconnect)
	local ok, err = self.server:start()
	if ok then
		print("server started")
	end
end

function final(self)
	self.server:stop()
	for _, client in ipairs(self.clients) do
		client:disconnect()
	end
end

function update(self, dt)
	self.server:update()

	for _, client in ipairs(self.clients) do
		--client.event:fire("NOP")
		client:update()
		client.shared:delta_sync()
	end
end

function on_message(self, message_id, message, sender)
	-- Add message-handling code here
	-- Learn more: https://defold.com/manuals/message-passing/
	-- Remove this function if not needed
end

function on_input(self, action_id, action)
	-- Add input-handling code here. The game object this script is attached to
	-- must have acquired input focus:
	--
	--    msg.post(".", "acquire_input_focus")
	--
	-- All mapped input bindings will be received. Mouse and touch input will
	-- be received regardless of where on the screen it happened.
	-- Learn more: https://defold.com/manuals/input/
	-- Remove this function if not needed
end

function on_reload(self)
	-- Add reload-handling code here
	-- Learn more: https://defold.com/manuals/hot-reload/
	-- Remove this function if not needed
end
